name: Deploy to OrbStack

on:
  push:
    branches: [ main ]

env:
  DEBUG: False
  ALLOWED_HOSTS: "*"
  DATABASE_URL: postgresql://synthform:synthform@db:5432/synthform
  REDIS_URL: redis://redis:6379/0

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
      
    - name: Create production .env file
      run: |
        cd apps/server
        cat > .env << EOF
        DEBUG=${{ env.DEBUG }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS=${{ env.ALLOWED_HOSTS }}
        DATABASE_URL=${{ env.DATABASE_URL }}
        REDIS_URL=${{ env.REDIS_URL }}
        TWITCH_CLIENT_ID=${{ secrets.TWITCH_CLIENT_ID }}
        TWITCH_CLIENT_SECRET=${{ secrets.TWITCH_CLIENT_SECRET }}
        TWITCH_EVENTSUB_SECRET=${{ secrets.TWITCH_EVENTSUB_SECRET }}
        FERNET_KEY=${{ secrets.FERNET_KEY }}
        EOF
    
    - name: Check changes and deploy selectively
      run: |
        # Check what changed in this push
        CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || git ls-files)
        
        # Server changes (Django app, but not Twitch service)
        if echo "$CHANGED_FILES" | grep -q "apps/server" && ! echo "$CHANGED_FILES" | grep -q "apps/server/events/services/twitch.py"; then
          echo "Server code changed, rebuilding server container"
          docker compose -f docker-compose.prod.yml up --build -d server
        fi
        
        # Twitch service changes
        if echo "$CHANGED_FILES" | grep -q "apps/server/events/services/twitch.py\|apps/server/events/models.py"; then
          echo "Twitch service code changed, rebuilding twitch container"
          docker compose -f docker-compose.prod.yml up --build -d twitch
        fi
        
        # Overlays changes
        if echo "$CHANGED_FILES" | grep -q "apps/overlays"; then
          echo "Overlay code changed, rebuilding overlays container"
          docker compose -f docker-compose.prod.yml up --build -d overlays
        fi
        
        # Infrastructure changes (compose files, Dockerfiles)
        if echo "$CHANGED_FILES" | grep -q "docker-compose\|Dockerfile"; then
          echo "Infrastructure changed, rebuilding all containers"
          docker compose -f docker-compose.prod.yml up --build -d --remove-orphans
        fi
        
        # Ensure all services are running (non-destructive)
        docker compose -f docker-compose.prod.yml up -d
    
    - name: Wait for services to be ready
      run: |
        timeout 60 sh -c 'until docker compose -f docker-compose.prod.yml exec -T db pg_isready -U synthform -d synthform; do sleep 1; done'
        sleep 5
    
    - name: Collect static files
      run: |
        docker compose -f docker-compose.prod.yml exec -T server uv run python manage.py collectstatic --noinput
    
    - name: Clean up old Docker images
      run: |
        docker image prune -f
