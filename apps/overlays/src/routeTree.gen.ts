/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MusicRouteImport } from './routes/music'
import { Route as LimitbreakRouteImport } from './routes/limitbreak'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SpecialPodcastRouteImport } from './routes/special/podcast'
import { Route as DebugEventsRouteImport } from './routes/debug/events'
import { Route as fullOmnibarRouteImport } from './routes/(full)/omnibar'
import { Route as fullIntroRouteImport } from './routes/(full)/intro'
import { Route as fullEmoteRainRouteImport } from './routes/(full)/emote-rain'
import { Route as fullCoworkingRouteImport } from './routes/(full)/coworking'

const MusicRoute = MusicRouteImport.update({
  id: '/music',
  path: '/music',
  getParentRoute: () => rootRouteImport,
} as any)
const LimitbreakRoute = LimitbreakRouteImport.update({
  id: '/limitbreak',
  path: '/limitbreak',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpecialPodcastRoute = SpecialPodcastRouteImport.update({
  id: '/special/podcast',
  path: '/special/podcast',
  getParentRoute: () => rootRouteImport,
} as any)
const DebugEventsRoute = DebugEventsRouteImport.update({
  id: '/debug/events',
  path: '/debug/events',
  getParentRoute: () => rootRouteImport,
} as any)
const fullOmnibarRoute = fullOmnibarRouteImport.update({
  id: '/(full)/omnibar',
  path: '/omnibar',
  getParentRoute: () => rootRouteImport,
} as any)
const fullIntroRoute = fullIntroRouteImport.update({
  id: '/(full)/intro',
  path: '/intro',
  getParentRoute: () => rootRouteImport,
} as any)
const fullEmoteRainRoute = fullEmoteRainRouteImport.update({
  id: '/(full)/emote-rain',
  path: '/emote-rain',
  getParentRoute: () => rootRouteImport,
} as any)
const fullCoworkingRoute = fullCoworkingRouteImport.update({
  id: '/(full)/coworking',
  path: '/coworking',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/limitbreak': typeof LimitbreakRoute
  '/music': typeof MusicRoute
  '/coworking': typeof fullCoworkingRoute
  '/emote-rain': typeof fullEmoteRainRoute
  '/intro': typeof fullIntroRoute
  '/omnibar': typeof fullOmnibarRoute
  '/debug/events': typeof DebugEventsRoute
  '/special/podcast': typeof SpecialPodcastRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/limitbreak': typeof LimitbreakRoute
  '/music': typeof MusicRoute
  '/coworking': typeof fullCoworkingRoute
  '/emote-rain': typeof fullEmoteRainRoute
  '/intro': typeof fullIntroRoute
  '/omnibar': typeof fullOmnibarRoute
  '/debug/events': typeof DebugEventsRoute
  '/special/podcast': typeof SpecialPodcastRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/limitbreak': typeof LimitbreakRoute
  '/music': typeof MusicRoute
  '/(full)/coworking': typeof fullCoworkingRoute
  '/(full)/emote-rain': typeof fullEmoteRainRoute
  '/(full)/intro': typeof fullIntroRoute
  '/(full)/omnibar': typeof fullOmnibarRoute
  '/debug/events': typeof DebugEventsRoute
  '/special/podcast': typeof SpecialPodcastRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/limitbreak'
    | '/music'
    | '/coworking'
    | '/emote-rain'
    | '/intro'
    | '/omnibar'
    | '/debug/events'
    | '/special/podcast'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/limitbreak'
    | '/music'
    | '/coworking'
    | '/emote-rain'
    | '/intro'
    | '/omnibar'
    | '/debug/events'
    | '/special/podcast'
  id:
    | '__root__'
    | '/'
    | '/limitbreak'
    | '/music'
    | '/(full)/coworking'
    | '/(full)/emote-rain'
    | '/(full)/intro'
    | '/(full)/omnibar'
    | '/debug/events'
    | '/special/podcast'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LimitbreakRoute: typeof LimitbreakRoute
  MusicRoute: typeof MusicRoute
  fullCoworkingRoute: typeof fullCoworkingRoute
  fullEmoteRainRoute: typeof fullEmoteRainRoute
  fullIntroRoute: typeof fullIntroRoute
  fullOmnibarRoute: typeof fullOmnibarRoute
  DebugEventsRoute: typeof DebugEventsRoute
  SpecialPodcastRoute: typeof SpecialPodcastRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/music': {
      id: '/music'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof MusicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/limitbreak': {
      id: '/limitbreak'
      path: '/limitbreak'
      fullPath: '/limitbreak'
      preLoaderRoute: typeof LimitbreakRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/special/podcast': {
      id: '/special/podcast'
      path: '/special/podcast'
      fullPath: '/special/podcast'
      preLoaderRoute: typeof SpecialPodcastRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/debug/events': {
      id: '/debug/events'
      path: '/debug/events'
      fullPath: '/debug/events'
      preLoaderRoute: typeof DebugEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(full)/omnibar': {
      id: '/(full)/omnibar'
      path: '/omnibar'
      fullPath: '/omnibar'
      preLoaderRoute: typeof fullOmnibarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(full)/intro': {
      id: '/(full)/intro'
      path: '/intro'
      fullPath: '/intro'
      preLoaderRoute: typeof fullIntroRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(full)/emote-rain': {
      id: '/(full)/emote-rain'
      path: '/emote-rain'
      fullPath: '/emote-rain'
      preLoaderRoute: typeof fullEmoteRainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(full)/coworking': {
      id: '/(full)/coworking'
      path: '/coworking'
      fullPath: '/coworking'
      preLoaderRoute: typeof fullCoworkingRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LimitbreakRoute: LimitbreakRoute,
  MusicRoute: MusicRoute,
  fullCoworkingRoute: fullCoworkingRoute,
  fullEmoteRainRoute: fullEmoteRainRoute,
  fullIntroRoute: fullIntroRoute,
  fullOmnibarRoute: fullOmnibarRoute,
  DebugEventsRoute: DebugEventsRoute,
  SpecialPodcastRoute: SpecialPodcastRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
