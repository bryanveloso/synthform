# Generated by Django 5.2.5 on 2025-09-23 06:09

from django.db import migrations
from django.utils import timezone
from datetime import timedelta


def backport_session_durations(apps, schema_editor):
    """
    Reconstruct session durations from stream.online and stream.offline events.
    This will only fill in data for sessions that don't already have duration tracking.
    """
    Session = apps.get_model('streams', 'Session')
    Event = apps.get_model('events', 'Event')

    # Get all sessions that need duration data
    sessions = Session.objects.filter(duration=0)

    for session in sessions:
        # Find stream.online event for this date
        online_event = Event.objects.filter(
            source='twitch',
            event_type='stream.online',
            timestamp__date=session.session_date
        ).order_by('timestamp').first()

        if online_event:
            # Find corresponding stream.offline event
            offline_event = Event.objects.filter(
                source='twitch',
                event_type='stream.offline',
                timestamp__date=session.session_date,
                timestamp__gt=online_event.timestamp
            ).order_by('timestamp').first()

            # Update session with timing data
            session.started_at = online_event.timestamp

            if offline_event:
                session.ended_at = offline_event.timestamp
                duration_delta = offline_event.timestamp - online_event.timestamp
                session.duration = int(duration_delta.total_seconds())
            else:
                # Stream might still be live or ended on a different day
                # Check if there's an offline event early next day (within 12 hours)
                next_day = session.session_date + timedelta(days=1)
                next_day_offline = Event.objects.filter(
                    source='twitch',
                    event_type='stream.offline',
                    timestamp__date=next_day,
                    timestamp__lt=online_event.timestamp + timedelta(hours=12)
                ).order_by('timestamp').first()

                if next_day_offline:
                    session.ended_at = next_day_offline.timestamp
                    duration_delta = next_day_offline.timestamp - online_event.timestamp
                    session.duration = int(duration_delta.total_seconds())

            session.save()


def reverse_backport(apps, schema_editor):
    """
    Reverse migration - just reset duration fields to defaults.
    We don't delete the data since it's additive.
    """
    Session = apps.get_model('streams', 'Session')
    Session.objects.update(
        started_at=None,
        ended_at=None,
        duration=0
    )


class Migration(migrations.Migration):

    dependencies = [
        ('streams', '0006_add_session_duration_tracking'),
        ('events', '0001_initial'),  # Ensure Event model exists
    ]

    operations = [
        migrations.RunPython(
            backport_session_durations,
            reverse_backport
        ),
    ]
