"""
Django settings for synthform project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from __future__ import annotations

import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environ
env = environ.Env(DEBUG=(bool, False))

# Read environment variables from .env file
environ.Env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY",
    default="django-insecure-9&0k(1__q3h2s33fmo5g(r5l34vi)pyv2#kllpzjaxvoxx8(07",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])


# Application definition

INSTALLED_APPS = [
    # Django Channels
    "channels",
    "daphne",
    # Django Batteries Included
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Core Applications
    "audio",
    "events",
    "streams",
    "transcriptions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "synthform.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "synthform.asgi.application"
WSGI_APPLICATION = "synthform.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": env.db(
        default="postgresql://synthform:synthform@localhost:5432/synthform"
    )
}

# Override database host for migration script when running locally
if os.getenv("DATABASE_HOST_OVERRIDE"):
    db_config = DATABASES["default"].copy()
    db_config["HOST"] = os.getenv("DATABASE_HOST_OVERRIDE")
    DATABASES["default"] = db_config


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redis Configuration
REDIS_URL = env("REDIS_URL", default="redis://localhost:6379/0")

# Django Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

# Twitch Integration
TWITCH_CLIENT_ID = env("TWITCH_CLIENT_ID", default="")
TWITCH_CLIENT_SECRET = env("TWITCH_CLIENT_SECRET", default="")
TWITCH_WEBHOOK_SECRET = env("TWITCH_WEBHOOK_SECRET", default="")
TWITCH_EVENTSUB_SECRET = env("TWITCH_EVENTSUB_SECRET", default="")

# OAuth Configuration
# Use different domains for development vs production
if DEBUG:
    OAUTH_BASE_URL = env("OAUTH_BASE_URL", default="https://twitch-dev.avalonstar.dev")
    EVENTSUB_DOMAIN = env("EVENTSUB_DOMAIN", default="twitch-dev.avalonstar.dev")
else:
    OAUTH_BASE_URL = env("OAUTH_BASE_URL", default="https://twitch.avalonstar.dev")
    EVENTSUB_DOMAIN = env("EVENTSUB_DOMAIN", default="twitch.avalonstar.dev")

TWITCH_OAUTH_REDIRECT_URI = f"{OAUTH_BASE_URL}/oauth/callback"

# Encryption
FERNET_KEY = env("FERNET_KEY", default="")
SALT_KEY = FERNET_KEY  # django-fernet-encrypted-fields expects this setting

# Celery Configuration
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Audio Processing
AUDIO_PROCESSING_ENABLED = env("AUDIO_PROCESSING_ENABLED", default=True)
WHISPER_EXTERNAL_URL = env("WHISPER_EXTERNAL_URL", default="http://zelan:9090")

# Audio limits and rate limiting
AUDIO_MAX_STRING_LENGTH = env("AUDIO_MAX_STRING_LENGTH", default=1000)
AUDIO_MAX_DATA_SIZE = env("AUDIO_MAX_DATA_SIZE", default=10 * 1024 * 1024)  # 10MB
AUDIO_RATE_LIMIT_PER_SECOND = env("AUDIO_RATE_LIMIT_PER_SECOND", default=100)
